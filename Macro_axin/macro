    template<> const ::Foam::word hePsiThermoreactingMixturegasHThermoPhysics::typeName(("hePsiThermo""<" + reactingMixture<gasHThermoPhysics>::typeName() + ">").c_str()); template<> int hePsiThermoreactingMixturegasHThermoPhysics::debug(::Foam::debug::debugSwitch(("hePsiThermo""<" + reactingMixture<gasHThermoPhysics>::typeName() + ">").c_str(), 0)); template<> const Foam::RegisterDebugSwitch<hePsiThermoreactingMixturegasHThermoPhysics> Foam::RegisterDebugSwitch<hePsiThermoreactingMixturegasHThermoPhysics>::registerDebugSwitch(("hePsiThermo""<" + reactingMixture<gasHThermoPhysics>::typeName() + ">").c_str())
        typedef autoPtr<psiReactionThermo> (*fvMeshConstructorPtr)(const fvMesh& mesh, const word& phaseName); typedef HashTable<fvMeshConstructorPtr, word, string::hash> fvMeshConstructorTable; static fvMeshConstructorTable* fvMeshConstructorTablePtr_; static void constructfvMeshConstructorTables(); static void destroyfvMeshConstructorTables(); template<class psiReactionThermoType> class addfvMeshConstructorToTable { public: static autoPtr<psiReactionThermo> New (const fvMesh& mesh, const word& phaseName) { return autoPtr<psiReactionThermo>(new psiReactionThermoType (mesh, phaseName)); } addfvMeshConstructorToTable ( const word& lookup = psiReactionThermoType::typeName ) { constructfvMeshConstructorTables(); if (!fvMeshConstructorTablePtr_->insert(lookup, New)) { std::cerr<< "Duplicate entry " << lookup << " in runtime selection table " << "psiReactionThermo" << std::endl; error::safePrintStack(std::cerr); } } ~addfvMeshConstructorToTable() { destroyfvMeshConstructorTables(); } }; template<class psiReactionThermoType> class addRemovablefvMeshConstructorToTable { const word& lookup_; public: static autoPtr<psiReactionThermo> New (const fvMesh& mesh, const word& phaseName) { return autoPtr<psiReactionThermo>(new psiReactionThermoType (mesh, phaseName)); } addRemovablefvMeshConstructorToTable ( const word& lookup = psiReactionThermoType::typeName ) : lookup_(lookup) { constructfvMeshConstructorTables(); fvMeshConstructorTablePtr_->set(lookup, New); } ~addRemovablefvMeshConstructorToTable() { if (fvMeshConstructorTablePtr_) { fvMeshConstructorTablePtr_->erase(lookup_); } } };;
